44.	Create three classes
-	Faculty with two data members facultyId and salary and two methods, one intput() method for accepting facultyId as input and another printSalary() to print salary.
-	FullTimeFaculty that inherits class Faculty with two data members’ basicSalary and allowance. Override input() method in this class that calls super class inut() method and accepts basicSalary and allowance as input. Salary should not be accepted as input but should be calculated using formula (basicSalary + allowance)
-	PartTimeFaculty that inherits class Faculty with two data members’ workingHours, ratePerHour. Override input() method in this class that calls super class inut() method and accepts workingHours and ratePerHour as input. Salary should not be accepted as input but should be calculated using formula ( workingHour * ratePerHour )

import java.util.Scanner;

class Faculty{
		private int facultyId;
		private double salary;
		
		Faculty(){
			facultyId = 0;
			salary = 3000;
		}
		
		Faculty(int facultyId){

			this.facultyId = facultyId;
		}

		void input(int facultyId){
		
			this.facultyId = facultyId;
		}
		void setSalary(double salary){
			
			this.salary = salary;
		}

		void printSalary(){
			
			System.out.println("\nFaculty Id : " + facultyId + "\nSalary : " + salary+"\n");
		}
}
		
class FullTimeFaculty extends Faculty{
		
		private double basicSalary;
		private double allowance;
		
		FullTimeFaculty(){
			basicSalary = 5000;
			allowance = 0.5;
		}
		
		FullTimeFaculty(int facultyId){

			super(facultyId);
		}
		
		void input(double basicSalary,double allowance){

			this.basicSalary = basicSalary;
			this.allowance = allowance;
			super.setSalary(basicSalary + allowance);
		}

}

class PartTimeFaculty extends Faculty{
		
		private double workingHours;
		private double ratePerHour;
		
		PartTimeFaculty(){
			workingHours = 0;
			ratePerHour = 100;
		}

		PartTimeFaculty(int facultyId){

			super(facultyId);
		}
		
		void input(double workingHours,double ratePerHour){
			
			this.workingHours = workingHours;
			this.ratePerHour = ratePerHour;
			super.setSalary(workingHours * ratePerHour);

		}
}

class Que44{
	public static void main(String []args){
		
			Scanner sc = new Scanner(System.in);
			System.out.print("Enter Details for Full time Faculty : \nFacultyId : ");
			int fac = sc.nextInt();
			System.out.print("Basic Salary : ");
			double basic = sc.nextDouble();
			System.out.print("Allowance : ");
			double allowance = sc.nextDouble();
			
			FullTimeFaculty f1 = new FullTimeFaculty(fac);
			f1.input(basic,allowance);
			
			System.out.print("Enter Details for Part time Faculty : \nFacultyId : ");
			fac = sc.nextInt();
			System.out.print("Working Hour : ");
			basic = sc.nextDouble();
			System.out.print("Rate per Hour : ");
			allowance = sc.nextDouble();
			PartTimeFaculty p1 = new PartTimeFaculty(fac);
			p1.input(basic,allowance);
			f1.printSalary();
			p1.printSalary();
			sc.close();
	}
}	

====================================================================

45.	Create a class Student with two members : rollno and percentage. Create default and parameterized constructors. Create method show() to display information. Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays semester. Create another class SchoolStudent inherits Student class. Add a new member className(eg 12th ,10th etc.) to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays className. Create a class( say Demo) with main method that carries out the operation of the project : -- has array to store objects of any class(Student,  CollegeStudent or SchoolStudent) --create two CollegeStudent  and three SchoolStudent objects and store them inside the array -- display all records from the array -- search record on the basic of rollno and check given rollno is of SchoolStudent or of CollegeStudent. --count how many students are having A grade, if for A grade percentage >75. 

import java.util.Scanner;

class Student1{
	private int rollno;
	private double percentage;
	
	Student1(){
		rollno = 0;
		 percentage = 0;
	}
	
	Student1(int rollno,double percentage){
		this.rollno = rollno;
		this.percentage = percentage;
	}

	int getRollNo(){
		return rollno;
	}
	double getPercentage(){
		return percentage;
	}

	void show(){
		
		System.out.println("\nRoll No. : " + rollno + "\nPercentage : " + percentage+"%");
		}
}

class CollegeStudent extends Student1{
	private int semester;
	
	CollegeStudent(){
		semester = 1;
	}

	CollegeStudent(int rollno,double percent,int semester){
		super(rollno,percent);
		this.semester = semester;
	}

	void show(){
		super.show();
		System.out.println("Semester : " + semester);
	}
	
}

class SchoolStudent extends Student1{
		private String className;

		SchoolStudent(){
			className = "10th";
		}
		
		SchoolStudent(int rollno,double percent,String className){
			super(rollno,percent);
			this.className = className;
		}

		void show(){
			super.show();
			System.out.println("Class Name : " + className);
		}
}

class Que45{
	public static void main(String[]args){

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Details : ");	
		
		//1)Array of any class

		System.out.print("No of College Student : " );
		int no = sc.nextInt();
		CollegeStudent arr[] = new CollegeStudent[no];
		for(int i=0;i<no;i++){
		
			System.out.print("\nStudent "+(i+1)+"th : \nRoll No. : ");
			int rollno = sc.nextInt();
			System.out.print("Percentagae : " );
			double percent = sc.nextDouble();
			System.out.print("Semester : ");
			int semester = sc.nextInt();

			arr[i] = new CollegeStudent(rollno,percent,semester);
		}
		
		System.out.println("\nDisplay Array of College Student : ");
		for(CollegeStudent i : arr){
			i.show();
		}	
		
		//2)create 2 collegeStudent 3 SchoolStudent
		
		System.out.print("\nNo. of All Student : " );
		no = sc.nextInt();
		Student1 arr1[] = new Student1[no];
		for(int i=0;i<no;i++){
			
			System.out.print("\nStudent "+(i+1)+"th : ");
			System.out.print("\nRoll No. : ");
			int rollno = sc.nextInt();
			System.out.print("Percentage : " );
			double percent = sc.nextDouble();

			System.out.print("\nEntered Student Type  : \nFor College press  : 1\nFor School press   : 2\nOnly Student press : 3\n" );
			int str = sc.nextInt();
			if(str == 1){
			
				System.out.print("Semester No. : ");
				int semester = sc.nextInt();
				arr1[i] = new CollegeStudent(rollno,percent,semester);
				
			}
			else if(str == 2){
				System.out.print("Class Name '10th', '12th' : ");
				String className = sc.next();
				arr1[i] = new SchoolStudent(rollno,percent,className);

			}
			else {
				arr1[i] = new Student1(rollno,percent);
			}
		}
		int flag = 0;
		System.out.println("\nDisplaying Array of College Student and School Student : ");
		for(Student1 i : arr1){
			i.show();
		}
		
		System.out.print("\nEnter the Roll No. to check : ");
		int rollno = sc.nextInt();
		int count = 0;
		for(Student1 i : arr1){
			if(i.getRollNo() == rollno){
				if(i instanceof CollegeStudent){
						System.out.println("\nRoll No. : " + rollno + " is CollegeStudent");
						flag = 1;
				}
				else if(i instanceof SchoolStudent){
						System.out.println("\nRoll No. : " + rollno + " is School Student");
						flag = 1;
				}
				else{
						System.out.println("\nRoll No. : " + rollno + " is (only) Student");
						flag = 1;
				}
			}
			if(i.getPercentage() > 75){
				count++;
			}
		}
		if(flag == 0){
			System.out.println("\nRoll No. : "+ rollno + " not Found !!!");
		}
		System.out.println("\n\nTotal No. Students having 'A' grade are : "+ count);
	}
}	

====================================================================

46.	Create a program to demonstrate the use of instanceof operator or secure reference down casting.

class Parent{
	public int x;
	
	Parent(){
		x = 1;
	}
	Parent(int x){
		this.x = x;
	}
	
	void show(){
		System.out.println("Parent class X = "+x);	
	}
}

class Child1 extends Parent{
	public int y;
	Child1(){
		y = 2;
	}
	Child1(int y){
		this.y = y;
	}
	
	void show(){
		System.out.println("1 Child class Y = "+y);
	}
}

class Child2 extends Parent{
	public int z;
	Child2(){
		z = 2;
	}
	Child2(int z){
		this.z = z;
	}
	
	void show(){
		System.out.println("2 Child class Z = "+z);
	}
}
class Que46{
	public static void main(String []args){

		Parent p1 = new Child1(8);  	// upcasting
		p1.show();   			// 1 Child class Y = 8

		Parent p2 = new Child2(10);
		p2.show();  			// 2 Child class Z = 10

		if(p1 instanceof Child1){
			System.out.println("p1 is Instance of Child 1");  //  p1 is Instance of Child 1
		}
		else if(p1 instanceof Child2){
			System.out.println("p1 Instance of Child 2");
		}
		else if(p1 instanceof Parent){
			System.out.println("p1 Instance of Parent");
		}
		
		Child2 p3 = (Child2) p2;  //downcating
		
		if(p3 instanceof Child2){
			 
			System.out.println("p3 Instance of Child 2");   // p3 Instance of Child 2
		}
		p3.show();    // 2 Child class Z = 10
	}
}


====================================================================

47.	Create a program to demonstrate constructor chaining.

class A{
	private int x;
	A(){
		System.out.println("Class A constructor");
	}
	
	A(int x){
		System.out.println("Class A Parameterised Constrctor");
	}

}

class B extends A{
	private int y ;
	B(){
		super();
		System.out.println("Class B construtor");
	}
	B(int y){
		super(14);
		System.out.println("Class B Parameterised construtor");
	}
		
}

class Que47{
	public static void main(String []args){
		A a1 = new A();
		B b1 = new B();
		
		A a2 = new A(2);
		B b2 = new B(4);
	}
}

====================================================================


48.	Create an Abstract class Processor with int member variable data  and method showData to display data value. Create abstract method process() to define processing of member data. Create a class  Factorial using abstract class Processor  to calculate and print factorial of a number by overriding the process method. b. Create a class Circle using abstract class Processor to calculate and print area of a circle by overriding the process method.Ask user to enter choice (factorial or circle area).  Also ask data to work upon. Use Processor class reference to achieve this mechanism.

import java.util.Scanner;

abstract class Processor{
	
		int data ;
		
		void showData(){
		
			System.out.println("Data : "+data);
		}
	
		abstract double process(int n);
}

class Factorial extends Processor{
		double process(int n){
			double fact = 1;
			for(int i=1;i<=n;i++){
				fact*=i;
			}
			this.data = n;
			return fact;
		}
}

class Circle extends Processor{
	double process(int n){
		data = n;
		return (22/7)*(n*n);
	}
}

class Que48{
	public static void main(String []args){
		Scanner sc = new Scanner(System.in);
		System.out.print("For Factorial press : 'f'\nFor Circle Area : 'a'\nEnter Choice : ");
		char ch = sc.next().charAt(0);
		switch(ch){
			case 'f' : 
				System.out.print("Enter the no. : ");
				int n = sc.nextInt();
				Processor p1 = new Factorial();
				double n3 = p1.process(n);
				System.out.println("Data : "+p1.data+"\nFactorial : "+n3);
				break;
			case 'a' : 
				System.out.print("Enter the no. : ");
				int n1 = sc.nextInt();
				Processor p2 = new Circle();
				double n4 = p2.process(n1);
				System.out.println("Data : "+p2.data+"\nArea of Circle : "+n4);
				break;
			default:
				System.out.println("Invalid Choice");
				break;
				
		}
		sc.close();
	}
}

====================================================================

49.	Create Interface Taxable with members salesTax=7% and incomeTax=10.5%. create abstract method calcTax(). a. Create class Employee(empId,name,salary) and implement Taxable to calculate incomeTax on yearly salary. b. Create class Product(pid,price,quantity) and implement Taxable to calculate salesTax on unit price of product. c. Create class for main method(Say XYZ), accept employee information and a product information from user and print income tax and sales tax respectively.

import java.util.Scanner;

interface Taxable{
		 double salesTax=0.07;
		 double incomeTax=0.105;
		
	   	 double calcTax();
	}

class Employee implements Taxable{
	private int empId;
	private String name;
	private double salary;
	
	Employee(int empId, String name,double salary){
		this.empId = empId;
		this.name = name;
		this.salary = salary;
	}
	
	public double calcTax(){
		return (double) salary*incomeTax;
	}
}

class Product implements Taxable{
	private int pid;
	private double price;
	private int quantity;
	
	Product(int pid, double price,int quantity){
		this.pid = pid;
		this.price = price;
		this.quantity = quantity;
	}
	public double calcTax(){
		return (double) salesTax*price*quantity;
	}

}


class Que49{
	public static void main(String []args){
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Employee Details:");
		System.out.print("Employee Id : ");
		int empId = sc.nextInt();
		System.out.print("Employee Name : ");
		String name = sc.next();
		System.out.print("Employee Salary : ");
		double salary = sc.nextDouble();
		
		Taxable e1 = new Employee(empId,name,salary);
		
		System.out.println("Enter Product Details:");
		System.out.print("Product pid : ");
		int pid = sc.nextInt();
		System.out.print("Product Price : ");
		double price = sc.nextDouble();
		System.out.print("Product Quantity : ");
		int quantity = sc.nextInt();
		
		Taxable p1 = new Product(pid,price,quantity);

		System.out.println("Income Tax : "+e1.calcTax());
		System.out.println("Sales Tax : "+p1.calcTax());
		sc.close();
	}
}

====================================================================


50.	Explain the importance of toString() and equals() method of the Object class and override them on class Employee(empId,name,salary).  a. Create class for main method(say XYZ),and accept five employees information and store in an array. Also ensure if entered empId already exist or not (use equals method).  b. Display all employee info using toString method.

package p51_60;

import java.util.Scanner;

class Employee {
	private int empId;
	private String  name;
	private double salary;
	Employee(int empId,String name,double salary){
		this.empId = empId;
		this.name = name;
		this.salary = salary;
	}
	public int getEmpId() {
		return empId;
	}
	public String getName() {
		return name;
	}
	public double getSalary() {
		return salary;
	}
	public boolean equals(Employee E1) {
		if(E1.getEmpId() == this.empId ) {
			return true;
		}
		else
			return false;
	}
	public String toString() {
		String str = "{ EmpId : "+this.getEmpId()+"\n Name : "+this.getName()+"\n Salary : "+this.getSalary()+"  },\n";
		return str;
	}
}



public class Que50 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Employee No : ");
		int no = sc.nextInt();
		
		Employee []arr = new Employee[no];
		for (int i = 0; i < arr.length; i++) {
			System.out.println("Enter "+(i+1)+"th Employee Details : ");
			System.out.print("EmpId : ");
			int emp = sc.nextInt();
			System.out.print("Name : ");
			String str = sc.next();
			System.out.print("Salary : ");
			double sal = sc.nextDouble();
			arr[i] = new Employee(emp,str,sal);
			for (int j = 0; j < i ; j++) {
				if(arr[i].equals(arr[j])) {
					i--;
					System.out.println("Double Employee ID Entry!!! \nEnter Details again :\n");
					break;
				}
			}
		}
		System.out.println("\n[ ");
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i].toString());
			
		}
		System.out.println("  ]");
		sc.close();
		
		

	}

}

====================================================================

51.	Create a program that helps banks to maintain records. It should have following facilities. o Anybody can create current or saving account with following initial information: account number, name, balance, and branch. o display account detail for a particular accounts. o display total money deposited in bank. o allow deposit and  withdrawal in an account  . o for saving account opening balance and minimum balance must be 5000. o for current account opening balance and minimum balance must be 1000. o can not withdraw the amount from the account that makes balance less than the minimum balance. 

import java.util.Scanner;

abstract class Account{
	protected int accNo;
	protected String name;
	protected double balance;
	protected String branch;
	static double total;
	abstract public void display();
}

class SavingAcc extends Account{
	
	SavingAcc(int accNo,String name,double balance,String branch){
		this.accNo = accNo;
		this.name = name;
		this.balance = balance;
		this.branch = branch;
		total += balance;
	}
	public void display() {
		System.out.println("Account no : "+accNo+"\nName :"+name+"\nBalance : "+balance+"\nBranch : "+branch);
		
	}
}

class CurrentAcc extends Account{
	
	CurrentAcc(int accNo,String name,double balance,String branch){
		this.accNo = accNo;
		this.name = name;
		this.balance = balance;
		this.branch = branch;
	}
	public void display() {
		System.out.println("Account no : "+accNo+"\nName :"+name+"\nBalance : "+balance+"\nBranch : "+branch);
		
	}
}

public class Que51 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		boolean flag = true;
		Account[] arr = new Account[1];
		while(flag) {
			System.out.println("Create Account press : 1\nDisplay Balace press : 2\nDisplay Total Bank Balance press : 3\nExit press : 4");
			int choice = sc.nextInt();
			switch(choice) {
			
			case 1:
					System.out.print("Enter No of Customers : ");
					int no = sc.nextInt();
					arr = new Account[no];
					for (int i = 0; i < arr.length; i++) {
						System.out.print("Enter type of Account : \nSaving press : (1)\nCurrent : (2)\nEnter your choice : \n");
						int type = sc.nextInt();
						if(type != 1 && type != 2) {
							i--;
							System.out.println("Invalid Entry!!!");
							continue;
						}
						System.out.print("Enter "+(i+1)+" customer Details :\nAccount No. : ");
						int acc = sc.nextInt();
						System.out.print("Name : ");
						String name = sc.next();
						System.out.print("Branch : ");
						String branch = sc.next();
						System.out.print("Intial Amount : ");
						double balance = sc.nextDouble();
						if(type == 1) {
							
							if(balance <5000) {
								System.out.println("Insufficient Amount!!!\nAmount should be Rs. 5000 or more for Savings\nEnter details again");
								i--;
								continue;
							}
							arr[i] = new SavingAcc(acc, name, balance, branch);
							continue;
						}
						if(type == 2) {
							
							if(balance <1000) {
								System.out.println("Insufficient Amount!!!\nAmount should be Rs. 1000 or more for Current\nEnter details again");
								i--;
								continue;
							}
							arr[i] = new CurrentAcc(acc, name, balance, branch);
							continue;
						}	
					}
					break;
			case 2:
									
						for(Account i : arr) {
							i.display();
							System.out.println("\n");
						}
						break;
			case 3:
				
					System.out.println("Total Bank Amount : "+Account.total+"\n");
					break;
			case 4:
					flag = false;
					break;
			}
		}
		sc.close();
	}
}

===================================================================

52.	Input name of a person and count how many vowels it contains.  Use String class functions. 

import java.util.Scanner;

public class Que52 {
	
	static int countVowel(String str) {
		int count = 0;
		for (int i = 0; i < str.length(); i++) {
			switch(str.charAt(i)) {
			case 'a' :
					count++;
					break;
			case 'e' :
				count++;
				break;
			case 'i' :
				count++;
				break;
			case 'o' :
				count++;
				break;
			case 'u' :
				count++;
				break;
			default:
				break;
					
			}
		}
		return count;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Enter the Name : ");
		Scanner sc = new Scanner(System.in);
		String name = sc.nextLine();
		name = name.toLowerCase();
		System.out.println("No. of Vowel : "+countVowel(name));
		sc.close();
	}

}

====================================================================

53.	Input data exactly in the following format, and print sum of all integer values. “67, 89, 23, 67, 12, 55, 66”.   (Hint use String class split method and Integer class parseInt method) .

import java.util.Scanner;

public class Que53 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the String : ");
		String str = sc.nextLine();
		String[] st = str.split(",\\s");  //", "
		int[] arr = new int[st.length];
		for (int i = 0; i < st.length; i++) {
			arr[i] = Integer.parseInt(st[i]);
			
		}
		for (int i : arr) {
			System.out.println(i);
		}
		sc.close();
	
	}

}

====================================================================

54.	Write a program to reverse the given String.

import java.util.Scanner;

public class Que54 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the String to Reverse : ");
		String str = sc.nextLine();
		StringBuilder input1 = new StringBuilder(str);
		input1 = input1.reverse();
		System.out.println("\nReverse String : " +input1);
		sc.close();
	}
	
}
====================================================================

55.	Write a program to count no of words in the String.

import java.util.Scanner;

public class Que55 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the string : ");
		String str = sc.nextLine();
		String []arr = str.split("[\\s]+");
		System.out.println("No of Words : "+arr.length);
		int count = 1;
		str.trim();
		char ch = str.charAt(0);
		for (int i = 1; i < str.length(); i++) {
			if(str.charAt(i) == ' ' && ch != ' ') {
				count++;
				
			}
			ch = str.charAt(i);
		}
		System.out.println("\nNo of Words : "+count);
		sc.close();
	}

}

====================================================================

56.	Write a program to convert very first character of every word in uppercase in a String.

import java.util.Scanner;

public class Que56 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the String : ");
		String str = sc.nextLine();
		String [] arr = str.split("[\\s]+");
		for (int i = 0; i < arr.length; i++) {
			int s = arr[i].charAt(0);
			if(s>96) {
				s = s -32;
			}
			char c = (char) s;
			arr[i] = c + arr[i].substring(1);
		}
		for (String st1 : arr) {
			System.out.print(" " +st1);
		}
		sc.close();
	}

}

====================================================================

57.	Write a program to reverse every word of the String.

import java.util.Scanner;

public class Que57 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			System.out.println("Enter the String to Reverse : ");
			Scanner sc = new Scanner(System.in);
			String str = sc.nextLine();
			str = str.trim();
			char [] ch = str.toCharArray();
			for (int i = 0; i < ch.length/2; i++) {
				char c = ch[i];
				ch[i] = ch[ch.length-i-1];
				ch[ch.length-i-1] = c;
				
			}
			System.out.println("Revese String is : ");
			for (char c1 : ch) {
				System.out.print(c1);
				
			}			
			sc.close();
	}

}

====================================================================

58.	Store name of weekdays in an array (starting from “Sunday” at 0 index). Ask day position from user and print day name. Handle array index out of bound exception and give proper message if user enter day index outside range (0-6).

import java.util.Scanner;

public class Que58 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String []week = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		boolean flag = true;
		Scanner sc = new Scanner(System.in);
		while(flag) {
			try {
				System.out.println("Enter no from 0-6 :\nEnter 8 to EXIT");
				int i = sc.nextInt();
				if(i == 8) {
					break;
				}
				System.out.println("You choose is : "+week[i]);
			}catch(ArrayIndexOutOfBoundsException e) {
				System.out.println(e);
			}
			
		}
		sc.close();
	}

}

====================================================================

59.	Create a class Voter(voterId, name, age) with parameterized constructor.  The parameterized constructor should throw a checked exception if age is less than 18. The message of exception is “invalid age for voter ” 



60.	Create Interface StudentFee and declare following method.  getFee() throws InvalidFeeException. This method ask fees from user and throws exception if user enters invalid or negative fees Create class Student with members (name, feesclass Voter{
	int voterId;
	String vName;
	int age;
	
	Voter(int voterId, String vName,int age ){
		if(age<18) {
			//System.out.println("Hello");
			try {
				throw new Exception("invalid age for voter");
			} catch (Exception e) {
				//e.printStackTrace();
				System.out.println(e);
			}
		}
		else {
			//System.out.println("QQQQ");
			this.age=age;
			this.voterId=voterId;
			this.vName=vName;
		}
		
		
			
	}

	
	public String display() {
		return "Voter [voterId=" + voterId + ", vName=" + vName + ", age=" + age + "]";
	}
	
	
}

public class Que59 {

	public static void main(String[] args) {
		Voter a = new Voter(1,"Adi",12);
		System.out.println(a.display());
		Voter a1 = new Voter(1,"Adi",22);
		System.out.println(a.display());
	}
	
}

====================================================================


61.	Create a Thread class to print following star (*) pattern on screen with delay of 1 second between each * print. Number of lines in the pattern should be passed to the constructor of Thread class.  *  * * * *  * * * * * * * * * * Use this class in main method and ask user to enter number of lines to print.

import java.util.Scanner;

class MyThread extends Thread {
	int num;
	
	public MyThread(int num) {
		super();
		this.num = num;
	}

	public void run() {
		for(int i=1;i<=num;i++) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.print("*"+" ");
		}
		System.out.println("\nEND");
	}
}

public class Que61 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number : ");
		int n = sc.nextInt();
		MyThread m = new MyThread(n);
		m.start();
	}

}

====================================================================

62.	Create a class that checks whether a given number is prime or not using  Runnable interface.import java.util.Scanner;

public class Que62{
	
	public static void main(String[] args) {
		int n;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number : ");
		n=sc.nextInt();
		MyThread1 t = new MyThread1(n);
		
		t.run();
		
	}
}

class MyThread1 implements Runnable{
	
	
	int n;
	public MyThread1(int n) {
		super();
		this.n = n;
	}

	@Override
	public void run() {
		int i,m=0,flag=0;      
		m=n/2;      
		if(n==0||n==1){  
		   System.out.println(n+" is not prime number");      
		}else{  
		   for(i=2;i<=m;i++){      
			   if(n%i==0){      
				   	System.out.println(n+" is not prime number");      
				   	flag=1;      
				   	break;      
			   }      
		   }      
		   if(flag==0)  { 
			   System.out.println(n+" is prime number"); 
		   }  
	}
}}

====================================================================

63.	Write a program to count how many times character ‘t’ occurs in a file. 

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Ques63 {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		File f = new File("D:\\Adinath\\ACDAC\\java\\prac\\file1.txt");
		if(!f.exists()){
			f.createNewFile();
			
		}
		FileWriter f1 = new FileWriter("D:\\Adinath\\ACDAC\\java\\prac\\file1.txt");
		String str = "how are you t and t are u there t ttt";
		BufferedWriter b1 = new BufferedWriter(f1);
		f1.write(str);
		b1.flush();
		b1.close();
		FileReader r1 = new FileReader("D:\\Adinath\\ACDAC\\java\\prac\\file1.txt");
		int ch ;
		int count = 0;
		while((ch = r1.read()) != -1) {
			if((char)ch == 't') {
				count++;
			}
		}
		System.out.println("Count : "+ count);
		f1.close();
	
		
	}

}

====================================================================

64.	Write a program to count no of words in a text file and average word size.

import java.io.BufferedReader;  
import java.io.FileReader;  
   
public class Ques64   
{  
    public static void main(String[] args) throws Exception {  
        String line;  
        int count = 0;  
          
        //Opens a file in read mode  
        FileReader file = new FileReader("D://CDAC//JAVA//CDAC//Java//TextSol//Assign1.txt");  
        BufferedReader br = new BufferedReader(file);  
              
        //Gets each line till end of file is reached  
        while((line = br.readLine()) != null) {  
            //Splits each line into words  
            String words[] = line.split(" ");  
            //Counts each word  
            count = count + words.length;  
        }  
          
        System.out.println("Number of words present in given file: " + count);  
        br.close();  
    }  
}  

====================================================================

65.	Write a program to count number of bytes in a image file(jpeg/png/gif).  Also find how much time it will take to upload the file on server if internet speed is 256 bps(bits per second).
66.	Write a program to store your shopping details in a binary file(shopping.dat) with information itemName, price, quantity. (Use ObjectOutputStream to store Item class object ).

import java.io.Serializable;

public class Ques66 implements Serializable {

	private static final long serialVersionUID = -299482035708790407L;

	private String name;
	private String gender;
	private int age;

	private String role;
	// private transient String role;

	public Ques66(String n) {
		this.name = n;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	@Override
	public String toString() {
		return "Employee:: Name=" + this.name + " Age=" + this.age + " Gender=" + this.gender + " Role=" + this.role;
	}

}

====================================================================

67.	Write a program to read data from shopping.dat file creted in above problem and find total money spent on all shopping items. . (Use ObjectInputStream to read Item class object).

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class Ques67 {

	public static void main(String[] args) {
		try {
			FileInputStream is = new FileInputStream("D://CDAC//JAVA//CDAC//Java//TextSol//Assign1.txt");
			ObjectInputStream ois = new ObjectInputStream(is);
			Ques67 emp = (Ques67) ois.readObject();
			ois.close();
			is.close();
			System.out.println(emp.toString());
		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}
	}

}
